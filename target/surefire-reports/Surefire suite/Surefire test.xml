<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite hostname="Dans-MacBook-Pro.local" failures="0" tests="117" name="Surefire test" time="94.852" errors="0" timestamp="5 Oct 2020 10:24:42 GMT">
  <testcase classname="com.example.redditClone.dto.VoteDTOTest" name="testVoteDTOAttributes on testVoteDTOAttributes(com.example.redditClone.dto.VoteDTOTest)" time="0.039"/>
  <testcase classname="com.example.redditClone.dto.PostResponseTest" name="testPostResponseBuilderPatternToStringMethod on testPostResponseBuilderPatternToStringMethod(com.example.redditClone.dto.PostResponseTest)" time="0.065"/>
  <testcase classname="com.example.redditClone.dto.PostResponseTest" name="testPostRequestsetterMethods on testPostRequestsetterMethods(com.example.redditClone.dto.PostResponseTest)" time="0.065"/>
  <testcase classname="com.example.redditClone.dto.AuthenticationResponseTest" name="testBuilderPatternToStringMethod on testBuilderPatternToStringMethod(com.example.redditClone.dto.AuthenticationResponseTest)" time="0.026"/>
  <testcase classname="com.example.redditClone.dto.AuthenticationResponseTest" name="testSetterMethods on testSetterMethods(com.example.redditClone.dto.AuthenticationResponseTest)" time="0.026"/>
  <testcase classname="com.example.redditClone.dto.LoginRequestTest" name="testSetterMethds on testSetterMethds(com.example.redditClone.dto.LoginRequestTest)" time="0.001"/>
  <testcase classname="com.example.redditClone.dto.ApiResponseTest" name="testSettterMethods on testSettterMethods(com.example.redditClone.dto.ApiResponseTest)" time="0.001"/>
  <testcase classname="com.example.redditClone.dto.UserSummaryTest" name="testUserSummarySetterMethods on testUserSummarySetterMethods(com.example.redditClone.dto.UserSummaryTest)" time="0.001"/>
  <testcase classname="com.example.redditClone.dto.RefreshTokenRequestTest" name="testBuilderPattern on testBuilderPattern(com.example.redditClone.dto.RefreshTokenRequestTest)" time="0.007"/>
  <testcase classname="com.example.redditClone.dto.RefreshTokenRequestTest" name="testSetterMethods on testSetterMethods(com.example.redditClone.dto.RefreshTokenRequestTest)" time="0.007"/>
  <testcase classname="com.example.redditClone.dto.RegistrationRequestTest" name="testSetterMethds on testSetterMethds(com.example.redditClone.dto.RegistrationRequestTest)" time="0.002"/>
  <testcase classname="com.example.redditClone.dto.CommentRequestTest" name="testCommentResponseSetterMethods on testCommentResponseSetterMethods(com.example.redditClone.dto.CommentRequestTest)" time="0.002"/>
  <testcase classname="com.example.redditClone.dto.CommentRequestTest" name="testCommentRequestBuilderToStringMethod on testCommentRequestBuilderToStringMethod(com.example.redditClone.dto.CommentRequestTest)" time="0.02"/>
  <testcase classname="com.example.redditClone.dto.SubredditDTOTest" name="testSubredditDTOBuilderPatternToStringMethod on testSubredditDTOBuilderPatternToStringMethod(com.example.redditClone.dto.SubredditDTOTest)" time="0.02"/>
  <testcase classname="com.example.redditClone.dto.SubredditDTOTest" name="testSubredditDTOSetterMethods on testSubredditDTOSetterMethods(com.example.redditClone.dto.SubredditDTOTest)" time="0.021"/>
  <testcase classname="com.example.redditClone.dto.PostRequestTest" name="testPostRequestBuilderPatternToStringMethod on testPostRequestBuilderPatternToStringMethod(com.example.redditClone.dto.PostRequestTest)" time="0.003"/>
  <testcase classname="com.example.redditClone.dto.PostRequestTest" name="testPostRequestsetterMethods on testPostRequestsetterMethods(com.example.redditClone.dto.PostRequestTest)" time="0.005"/>
  <testcase classname="com.example.redditClone.dto.CommentResponseTest" name="testCommentResponseSetterMethods on testCommentResponseSetterMethods(com.example.redditClone.dto.CommentResponseTest)" time="0.002"/>
  <testcase classname="com.example.redditClone.dto.CommentResponseTest" name="testCommentResponseBuilderToStringMethod on testCommentResponseBuilderToStringMethod(com.example.redditClone.dto.CommentResponseTest)" time="0.004"/>
  <testcase classname="com.example.redditClone.security.JwtTokenProviderTest" name="shouldThrowIllegalArgumentExceptionWhenInvalidSignature on shouldThrowIllegalArgumentExceptionWhenInvalidSignature(com.example.redditClone.security.JwtTokenProviderTest)" time="21.602"/>
  <testcase classname="com.example.redditClone.security.JwtTokenProviderTest" name="shouldThrowMalformedExceptionWhenInvalidSignature on shouldThrowMalformedExceptionWhenInvalidSignature(com.example.redditClone.security.JwtTokenProviderTest)" time="21.617"/>
  <testcase classname="com.example.redditClone.security.JwtTokenProviderTest" name="shouldThrowInvalidSignatureExceptionWhenInvalidSignature on shouldThrowInvalidSignatureExceptionWhenInvalidSignature(com.example.redditClone.security.JwtTokenProviderTest)" time="21.665"/>
  <testcase classname="com.example.redditClone.security.JwtTokenProviderTest" name="shouldThrowExpiredJwtExceptionWhenTokenHasExpired on shouldThrowExpiredJwtExceptionWhenTokenHasExpired(com.example.redditClone.security.JwtTokenProviderTest)" time="21.673"/>
  <testcase classname="com.example.redditClone.security.JwtTokenProviderTest" name="shouldGetUserIdFromTokenWhenValidJwtToken on shouldGetUserIdFromTokenWhenValidJwtToken(com.example.redditClone.security.JwtTokenProviderTest)" time="21.685"/>
  <testcase classname="com.example.redditClone.security.JwtTokenProviderTest" name="shouldReturnTrueWhenTokenIsValid on shouldReturnTrueWhenTokenIsValid(com.example.redditClone.security.JwtTokenProviderTest)" time="21.695"/>
  <testcase classname="com.example.redditClone.models.SubredditTest" name="testCreatePostWithSetterMethods on testCreatePostWithSetterMethods(com.example.redditClone.models.SubredditTest)" time="1.93"/>
  <testcase classname="com.example.redditClone.models.SubredditTest" name="testCreatePostWithBuilderPattern on testCreatePostWithBuilderPattern(com.example.redditClone.models.SubredditTest)" time="2.04"/>
  <testcase classname="com.example.redditClone.models.SubredditTest" name="testCreatePostWithAllArgsConstructorArgs on testCreatePostWithAllArgsConstructorArgs(com.example.redditClone.models.SubredditTest)" time="2.071"/>
  <testcase classname="com.example.redditClone.models.SubredditTest" name="testCreatePostWithBuilderPatternToString on testCreatePostWithBuilderPatternToString(com.example.redditClone.models.SubredditTest)" time="2.104"/>
  <testcase classname="com.example.redditClone.models.VoteTest" name="testCreatePostWithBuilderPattern on testCreatePostWithBuilderPattern(com.example.redditClone.models.VoteTest)" time="0.143"/>
  <testcase classname="com.example.redditClone.models.VoteTest" name="testCreateVoteWithBuilderPatternToString on testCreateVoteWithBuilderPatternToString(com.example.redditClone.models.VoteTest)" time="0.226"/>
  <testcase classname="com.example.redditClone.models.VoteTest" name="testCreatePostWithAllArgsConstructorArgs on testCreatePostWithAllArgsConstructorArgs(com.example.redditClone.models.VoteTest)" time="0.311"/>
  <testcase classname="com.example.redditClone.models.VoteTest" name="testCreateVoteWithSetterMethods on testCreateVoteWithSetterMethods(com.example.redditClone.models.VoteTest)" time="0.347"/>
  <testcase classname="com.example.redditClone.models.UserEntityTest" name="saveUser on saveUser(com.example.redditClone.models.UserEntityTest)" time="0.014"/>
  <testcase classname="com.example.redditClone.models.UserEntityTest" name="whenBlankUserName_and_Email_thenOneConstraintViolation on whenBlankUserName_and_Email_thenOneConstraintViolation(com.example.redditClone.models.UserEntityTest)" time="0.035"/>
  <testcase classname="com.example.redditClone.models.UserEntityTest" name="saveUserWithCustomUserID on saveUserWithCustomUserID(com.example.redditClone.models.UserEntityTest)" time="0.053"/>
  <testcase classname="com.example.redditClone.models.UserEntityTest" name="when_ID_AccountStatus_and_CreationDate_Are_Set on when_ID_AccountStatus_and_CreationDate_Are_Set(com.example.redditClone.models.UserEntityTest)" time="0.083"/>
  <testcase classname="com.example.redditClone.models.NotificationEmailTest" name="testCreateVoteWithBuilderPatternToString on testCreateVoteWithBuilderPatternToString(com.example.redditClone.models.NotificationEmailTest)" time="0.001"/>
  <testcase classname="com.example.redditClone.models.NotificationEmailTest" name="testEqualsMethodContracts on testEqualsMethodContracts(com.example.redditClone.models.NotificationEmailTest)" time="0.001"/>
  <testcase classname="com.example.redditClone.models.NotificationEmailTest" name="testCreateNotificationEmailUsingSetterMethod on testCreateNotificationEmailUsingSetterMethod(com.example.redditClone.models.NotificationEmailTest)" time="0.002"/>
  <testcase classname="com.example.redditClone.models.NotificationEmailTest" name="testCreateCommentWithAllArgsConstructorArgs on testCreateCommentWithAllArgsConstructorArgs(com.example.redditClone.models.NotificationEmailTest)" time="0.002"/>
  <testcase classname="com.example.redditClone.models.CommentTest" name="testCreateCommentWithBuilderPattern on testCreateCommentWithBuilderPattern(com.example.redditClone.models.CommentTest)" time="0.02"/>
  <testcase classname="com.example.redditClone.models.CommentTest" name="testCreateVoteWithBuilderPatternToString on testCreateVoteWithBuilderPatternToString(com.example.redditClone.models.CommentTest)" time="0.038"/>
  <testcase classname="com.example.redditClone.models.CommentTest" name="testEqualsMethodContracts on testEqualsMethodContracts(com.example.redditClone.models.CommentTest)" time="0.078"/>
  <testcase classname="com.example.redditClone.models.CommentTest" name="testCreateCommentWithAllArgsConstructorArgs on testCreateCommentWithAllArgsConstructorArgs(com.example.redditClone.models.CommentTest)" time="0.096"/>
  <testcase classname="com.example.redditClone.models.CommentTest" name="testHashCodeMethodContracts on testHashCodeMethodContracts(com.example.redditClone.models.CommentTest)" time="0.116"/>
  <testcase classname="com.example.redditClone.models.CommentTest" name="testCreateCommentWithSetterMethods on testCreateCommentWithSetterMethods(com.example.redditClone.models.CommentTest)" time="0.13"/>
  <testcase classname="com.example.redditClone.models.PostTest" name="testCreatePostWithSetterMethods on testCreatePostWithSetterMethods(com.example.redditClone.models.PostTest)" time="0.017"/>
  <testcase classname="com.example.redditClone.models.PostTest" name="testCreatePostWithBuilderPattern on testCreatePostWithBuilderPattern(com.example.redditClone.models.PostTest)" time="0.039"/>
  <testcase classname="com.example.redditClone.models.PostTest" name="testCreatePostWithAllArgsConstructorArgs on testCreatePostWithAllArgsConstructorArgs(com.example.redditClone.models.PostTest)" time="0.068"/>
  <testcase classname="com.example.redditClone.models.PostTest" name="testCreatePostWithBuilderPatternToString on testCreatePostWithBuilderPatternToString(com.example.redditClone.models.PostTest)" time="0.103"/>
  <testcase classname="com.example.redditClone.models.AccountVerificationTokenTest" name="createAccountVerificationTokenWithConstructor on createAccountVerificationTokenWithConstructor(com.example.redditClone.models.AccountVerificationTokenTest)" time="0.024"/>
  <testcase classname="com.example.redditClone.models.AccountVerificationTokenTest" name="createAccountVerificationToken on createAccountVerificationToken(com.example.redditClone.models.AccountVerificationTokenTest)" time="0.039"/>
  <testcase classname="com.example.redditClone.models.RefreshTokenTest" name="testCreateVoteWithBuilderPatternToString on testCreateVoteWithBuilderPatternToString(com.example.redditClone.models.RefreshTokenTest)" time="0.015"/>
  <testcase classname="com.example.redditClone.models.RefreshTokenTest" name="testEqualsMethodContracts on testEqualsMethodContracts(com.example.redditClone.models.RefreshTokenTest)" time="0.03"/>
  <testcase classname="com.example.redditClone.models.RefreshTokenTest" name="testCreateCommentWithAllArgsConstructorArgs on testCreateCommentWithAllArgsConstructorArgs(com.example.redditClone.models.RefreshTokenTest)" time="0.04"/>
  <testcase classname="com.example.redditClone.models.RefreshTokenTest" name="testHashCodeMethodContracts on testHashCodeMethodContracts(com.example.redditClone.models.RefreshTokenTest)" time="0.05"/>
  <testcase classname="com.example.redditClone.controller.UserControllerTest" name="shouldReturnCurrentUserDetails on shouldReturnCurrentUserDetails(com.example.redditClone.controller.UserControllerTest)" time="5.734"/>
  <testcase classname="com.example.redditClone.controller.AuthControllerLoginTest" name="userShouldLoginSuccessfullyWhenAccountExists on userShouldLoginSuccessfullyWhenAccountExists(com.example.redditClone.controller.AuthControllerLoginTest)" time="6.346"/>
  <testcase classname="com.example.redditClone.controller.AuthControllerLoginTest" name="userLoginShouldBeUnsuccessfulWhenWrongAccountDetailsAreUsed on userLoginShouldBeUnsuccessfulWhenWrongAccountDetailsAreUsed(com.example.redditClone.controller.AuthControllerLoginTest)" time="6.396"/>
  <testcase classname="com.example.redditClone.controller.AuthControllerLoginTest" name="userLoginShouldBeUnsuccessfulWhenWrongPasswordIsUsed on userLoginShouldBeUnsuccessfulWhenWrongPasswordIsUsed(com.example.redditClone.controller.AuthControllerLoginTest)" time="6.625"/>
  <testcase classname="com.example.redditClone.controller.PostControllerTest" name="shouldReturnAListOfPostsWhenGetAllPostsIsCalled on shouldReturnAListOfPostsWhenGetAllPostsIsCalled(com.example.redditClone.controller.PostControllerTest)" time="5.604"/>
  <testcase classname="com.example.redditClone.controller.PostControllerTest" name="shouldReturnPostsWithinGivenSubredditIDWhenGetPostsByUsernameIsCalled on shouldReturnPostsWithinGivenSubredditIDWhenGetPostsByUsernameIsCalled(com.example.redditClone.controller.PostControllerTest)" time="5.721"/>
  <testcase classname="com.example.redditClone.controller.PostControllerTest" name="shouldReturnPostsWithinGivenSubredditIDWhenGetPostsBySubredditIsCalled on shouldReturnPostsWithinGivenSubredditIDWhenGetPostsBySubredditIsCalled(com.example.redditClone.controller.PostControllerTest)" time="5.821"/>
  <testcase classname="com.example.redditClone.controller.PostControllerTest" name="shouldReturnCreatedSuccessWhenAddPostMethodIsCalled on shouldReturnCreatedSuccessWhenAddPostMethodIsCalled(com.example.redditClone.controller.PostControllerTest)" time="6.096"/>
  <testcase classname="com.example.redditClone.controller.PostControllerTest" name="shouldReturnAPostWithGivenIdWhenGetPostByIDIsCalled on shouldReturnAPostWithGivenIdWhenGetPostByIDIsCalled(com.example.redditClone.controller.PostControllerTest)" time="6.275"/>
  <testcase classname="com.example.redditClone.controller.AuthControllerRegistrationTest" name="shouldRaiseMethodArgumentNotValidExceptionWithBadRequestWhenParamsValidationFails on shouldRaiseMethodArgumentNotValidExceptionWithBadRequestWhenParamsValidationFails(com.example.redditClone.controller.AuthControllerRegistrationTest)" time="4.091"/>
  <testcase classname="com.example.redditClone.controller.AuthControllerRegistrationTest" name="shouldReturnCreatedIfRegistrationRequestIsOk on shouldReturnCreatedIfRegistrationRequestIsOk(com.example.redditClone.controller.AuthControllerRegistrationTest)" time="4.819"/>
  <testcase classname="com.example.redditClone.controller.AuthControllerConstraintsCheckTest" name="userSignUpShouldFailIfUsernameIsTaken on userSignUpShouldFailIfUsernameIsTaken(com.example.redditClone.controller.AuthControllerConstraintsCheckTest)" time="3.65"/>
  <testcase classname="com.example.redditClone.controller.AuthControllerConstraintsCheckTest" name="userSignUpShouldFailIfEmailIsTaken on userSignUpShouldFailIfEmailIsTaken(com.example.redditClone.controller.AuthControllerConstraintsCheckTest)" time="3.661"/>
  <testcase classname="com.example.redditClone.controller.VoteControllerPostExceptionTest" name="shouldRaisePostNotFoundExceptionWhenVotingForAPostThatDoesNotExist on shouldRaisePostNotFoundExceptionWhenVotingForAPostThatDoesNotExist(com.example.redditClone.controller.VoteControllerPostExceptionTest)" time="3.209"/>
  <testcase classname="com.example.redditClone.controller.SubredditControllerTest" name="getSubreddit_ShouldReturn_Found_Subreddit on getSubreddit_ShouldReturn_Found_Subreddit(com.example.redditClone.controller.SubredditControllerTest)" time="2.752"/>
  <testcase classname="com.example.redditClone.controller.SubredditControllerTest" name="getAllSubreddits_ShouldReturn_List_of_Subreddits on getAllSubreddits_ShouldReturn_List_of_Subreddits(com.example.redditClone.controller.SubredditControllerTest)" time="2.772"/>
  <testcase classname="com.example.redditClone.controller.SubredditControllerTest" name="addSubreddit_ShouldReturn_Created_Subreddit on addSubreddit_ShouldReturn_Created_Subreddit(com.example.redditClone.controller.SubredditControllerTest)" time="2.961"/>
  <testcase classname="com.example.redditClone.controller.SubredditControllerTest" name="getSubreddit_ShouldReturn_404_Not_Found_For_Non_Existent_Subreddit on getSubreddit_ShouldReturn_404_Not_Found_For_Non_Existent_Subreddit(com.example.redditClone.controller.SubredditControllerTest)" time="2.973"/>
  <testcase classname="com.example.redditClone.controller.CommentControllerTest" name="shouldReturnAlistOfCommentsBasedOnPostId on shouldReturnAlistOfCommentsBasedOnPostId(com.example.redditClone.controller.CommentControllerTest)" time="3.387"/>
  <testcase classname="com.example.redditClone.controller.CommentControllerTest" name="shouldReturnAlistOfCommentsBasedOnUsername on shouldReturnAlistOfCommentsBasedOnUsername(com.example.redditClone.controller.CommentControllerTest)" time="3.524"/>
  <testcase classname="com.example.redditClone.controller.CommentControllerTest" name="shouldReturnCreatedSuccessWhenAddPostMethodIsCalled on shouldReturnCreatedSuccessWhenAddPostMethodIsCalled(com.example.redditClone.controller.CommentControllerTest)" time="3.721"/>
  <testcase classname="com.example.redditClone.controller.VoteControllerVoteExceptionTest" name="shouldRaiseVoteExceptionForDownVoteWhenUserHadAlreadyDownVoted on shouldRaiseVoteExceptionForDownVoteWhenUserHadAlreadyDownVoted(com.example.redditClone.controller.VoteControllerVoteExceptionTest)" time="3.263"/>
  <testcase classname="com.example.redditClone.controller.PostControllerExceptionsTest" name="shouldRaisePostNotFoundWhenGetPostByIDIsCalledWithNonExistingID on shouldRaisePostNotFoundWhenGetPostByIDIsCalledWithNonExistingID(com.example.redditClone.controller.PostControllerExceptionsTest)" time="2.543"/>
  <testcase classname="com.example.redditClone.controller.PostControllerExceptionsTest" name="shouldRaiseSubredditNotFoundWhenGetPostByIDIsCalledWithNonExistingSubredditID on shouldRaiseSubredditNotFoundWhenGetPostByIDIsCalledWithNonExistingSubredditID(com.example.redditClone.controller.PostControllerExceptionsTest)" time="2.647"/>
  <testcase classname="com.example.redditClone.controller.PostControllerExceptionsTest" name="shouldRaiseSubredditNotFoundWhenSaveIsCalledWithSubredditNameThatDoesNotExist on shouldRaiseSubredditNotFoundWhenSaveIsCalledWithSubredditNameThatDoesNotExist(com.example.redditClone.controller.PostControllerExceptionsTest)" time="2.748"/>
  <testcase classname="com.example.redditClone.controller.PostControllerExceptionsTest" name="shouldRaiseUserNotFoundWhenGetPostByUsernameIsCalledWithNonExistingUsername on shouldRaiseUserNotFoundWhenGetPostByUsernameIsCalledWithNonExistingUsername(com.example.redditClone.controller.PostControllerExceptionsTest)" time="2.846"/>
  <testcase classname="com.example.redditClone.controller.AuthControllerTokenVerificationTest" name="shouldRaiseActivationExceptionWhenActivationTokenIsInvalid on shouldRaiseActivationExceptionWhenActivationTokenIsInvalid(com.example.redditClone.controller.AuthControllerTokenVerificationTest)" time="2.44"/>
  <testcase classname="com.example.redditClone.controller.AuthControllerTokenVerificationTest" name="shouldReturnOkWhenActivationTokenIsValid on shouldReturnOkWhenActivationTokenIsValid(com.example.redditClone.controller.AuthControllerTokenVerificationTest)" time="2.487"/>
  <testcase classname="com.example.redditClone.controller.CommentControllerExceptionsTest" name="shouldThrowPostNotFoundWhenGettingListOfCommentsBasedOnPostIdWhenPostIDDoesNotExist on shouldThrowPostNotFoundWhenGettingListOfCommentsBasedOnPostIdWhenPostIDDoesNotExist(com.example.redditClone.controller.CommentControllerExceptionsTest)" time="0.101"/>
  <testcase classname="com.example.redditClone.controller.CommentControllerExceptionsTest" name="shouldThrowPostNotFoundExceptionWhenPostIdDoesNotExist on shouldThrowPostNotFoundExceptionWhenPostIdDoesNotExist(com.example.redditClone.controller.CommentControllerExceptionsTest)" time="0.2"/>
  <testcase classname="com.example.redditClone.controller.CommentControllerExceptionsTest" name="shouldThrowUserNotFoundExceptionWhenGettingListOfCommentsBasedOnUsernameIfUsernameDoesNotExist on shouldThrowUserNotFoundExceptionWhenGettingListOfCommentsBasedOnUsernameIfUsernameDoesNotExist(com.example.redditClone.controller.CommentControllerExceptionsTest)" time="0.306"/>
  <testcase classname="com.example.redditClone.controller.AuthControllerRefreshTokenTest" name="userShouldRefreshTokenWhenRefreshTokenIsRequestedWithValidTokenAndUsername on userShouldRefreshTokenWhenRefreshTokenIsRequestedWithValidTokenAndUsername(com.example.redditClone.controller.AuthControllerRefreshTokenTest)" time="4.095"/>
  <testcase classname="com.example.redditClone.controller.AuthControllerRefreshTokenTest" name="shouldReturnTokenDeletedMessageWhenUserLogsOutOfTheSystem on shouldReturnTokenDeletedMessageWhenUserLogsOutOfTheSystem(com.example.redditClone.controller.AuthControllerRefreshTokenTest)" time="4.107"/>
  <testcase classname="com.example.redditClone.controller.VoteControllerTest" name="shouldReturnOkForDownVoteWhenUserHadUpVoted on shouldReturnOkForDownVoteWhenUserHadUpVoted(com.example.redditClone.controller.VoteControllerTest)" time="0.343"/>
  <testcase classname="com.example.redditClone.controller.VoteControllerTest" name="shouldReturnOkForUpVote on shouldReturnOkForUpVote(com.example.redditClone.controller.VoteControllerTest)" time="0.458"/>
  <testcase classname="com.example.redditClone.controller.VoteControllerTest" name="shouldReturnOkForDownVote on shouldReturnOkForDownVote(com.example.redditClone.controller.VoteControllerTest)" time="0.559"/>
  <testcase classname="com.example.redditClone.service.PostServiceTest" name="shouldMapSubredditObjectToSubredditDTOWhenGetSubredditIsCalled on shouldMapSubredditObjectToSubredditDTOWhenGetSubredditIsCalled(com.example.redditClone.service.PostServiceTest)" time="4.088"/>
  <testcase classname="com.example.redditClone.service.UserPrincipalTest" name="testEqualsMethodContracts on testEqualsMethodContracts(com.example.redditClone.service.UserPrincipalTest)" time="0.002"/>
  <testcase classname="com.example.redditClone.service.UserPrincipalTest" name="testCreateUserPrincipal on testCreateUserPrincipal(com.example.redditClone.service.UserPrincipalTest)" time="0.003"/>
  <testcase classname="com.example.redditClone.service.UserPrincipalTest" name="testHashCodeMethodContact on testHashCodeMethodContact(com.example.redditClone.service.UserPrincipalTest)" time="0.003"/>
  <testcase classname="com.example.redditClone.service.CustomUserDetailsServiceTest" name="shouldRaiseUsernameNotFoundExceptionWhenLoadUserByIdIsCalledWithNonExistentUser on shouldRaiseUsernameNotFoundExceptionWhenLoadUserByIdIsCalledWithNonExistentUser(com.example.redditClone.service.CustomUserDetailsServiceTest)" time="0.025"/>
  <testcase classname="com.example.redditClone.service.CustomUserDetailsServiceTest" name="shouldRaiseUsernameNotFoundExceptionWhenLoadUserByUsernameIsCalledWithNonExistentUser on shouldRaiseUsernameNotFoundExceptionWhenLoadUserByUsernameIsCalledWithNonExistentUser(com.example.redditClone.service.CustomUserDetailsServiceTest)" time="0.041"/>
  <testcase classname="com.example.redditClone.service.CustomUserDetailsServiceTest" name="shouldReturnUserDetailsWhenLoadUserByIdIsCalledWithExistingUser on shouldReturnUserDetailsWhenLoadUserByIdIsCalledWithExistingUser(com.example.redditClone.service.CustomUserDetailsServiceTest)" time="0.09"/>
  <testcase classname="com.example.redditClone.service.CustomUserDetailsServiceTest" name="shouldReturnUserDetailsWhenLoadUserByUsernameIsCalledWithExistingUser on shouldReturnUserDetailsWhenLoadUserByUsernameIsCalledWithExistingUser(com.example.redditClone.service.CustomUserDetailsServiceTest)" time="0.103"/>
  <testcase classname="com.example.redditClone.service.SubredditServiceTest" name="shouldReturnListOfSubredditDTOsWhenGetAllisCalled on shouldReturnListOfSubredditDTOsWhenGetAllisCalled(com.example.redditClone.service.SubredditServiceTest)" time="7.752"/>
  <testcase classname="com.example.redditClone.service.SubredditServiceTest" name="shouldMapSubredditObjectToSubredditDTOWhenGetSubredditIsCalled on shouldMapSubredditObjectToSubredditDTOWhenGetSubredditIsCalled(com.example.redditClone.service.SubredditServiceTest)" time="7.761"/>
  <testcase classname="com.example.redditClone.service.SubredditServiceTest" name="shouldReturnSubredditWhenSaveIsCalledWithSubredditDTO on shouldReturnSubredditWhenSaveIsCalledWithSubredditDTO(com.example.redditClone.service.SubredditServiceTest)" time="8.028"/>
  <testcase classname="com.example.redditClone.service.SubredditServiceTest" name="shouldThrowSubredditNotFoundExceptionWhenGetSubredditIsCalledWithNonExistingSubredditID on shouldThrowSubredditNotFoundExceptionWhenGetSubredditIsCalledWithNonExistingSubredditID(com.example.redditClone.service.SubredditServiceTest)" time="8.04"/>
  <testcase classname="com.example.redditClone.service.AuthServiceTest" name="shouldReturnFalseWhenAuthenticationIsEmpty on shouldReturnFalseWhenAuthenticationIsEmpty(com.example.redditClone.service.AuthServiceTest)" time="2.834"/>
  <testcase classname="com.example.redditClone.service.AuthServiceTest" name="shouldRegisterUserSuccessfully on shouldRegisterUserSuccessfully(com.example.redditClone.service.AuthServiceTest)" time="3.019"/>
  <testcase classname="com.example.redditClone.service.AuthServiceTest" name="shouldThrowRefreshExceptionWhenInvalidRefreshToken on shouldThrowRefreshExceptionWhenInvalidRefreshToken(com.example.redditClone.service.AuthServiceTest)" time="3.029"/>
  <testcase classname="com.example.redditClone.service.AuthServiceTest" name="shouldThrowUsernameNotFoundExceptionWhenUserDoesNotExist on shouldThrowUsernameNotFoundExceptionWhenUserDoesNotExist(com.example.redditClone.service.AuthServiceTest)" time="3.144"/>
  <testcase classname="com.example.redditClone.service.AuthServiceTest" name="shouldValidateRefreshTokenSuccessfully on shouldValidateRefreshTokenSuccessfully(com.example.redditClone.service.AuthServiceTest)" time="3.244"/>
  <testcase classname="com.example.redditClone.service.AuthServiceTest" name="shouldThrowActivationExceptionIfTokenIsInvalid on shouldThrowActivationExceptionIfTokenIsInvalid(com.example.redditClone.service.AuthServiceTest)" time="3.252"/>
  <testcase classname="com.example.redditClone.service.AuthServiceTest" name="shouldGetCurrentUserPrincipal on shouldGetCurrentUserPrincipal(com.example.redditClone.service.AuthServiceTest)" time="3.429"/>
  <testcase classname="com.example.redditClone.service.AuthServiceTest" name="shouldVerifyAccountVerificationTokenSuccessfullyForValidTokens on shouldVerifyAccountVerificationTokenSuccessfullyForValidTokens(com.example.redditClone.service.AuthServiceTest)" time="3.55"/>
  <testcase classname="com.example.redditClone.service.AuthServiceTest" name="shouldDeleteRefreshTokenWhenRefreshTokenExists on shouldDeleteRefreshTokenWhenRefreshTokenExists(com.example.redditClone.service.AuthServiceTest)" time="3.662"/>
  <testcase classname="com.example.redditClone.service.AuthServiceTest" name="shouldLoginUserSuccessfullyForCorrectUsernameAndPassword on shouldLoginUserSuccessfullyForCorrectUsernameAndPassword(com.example.redditClone.service.AuthServiceTest)" time="3.933"/>
  <testcase classname="com.example.redditClone.service.MailServiceTest" name="testSendEmailSuccesful on testSendEmailSuccesful(com.example.redditClone.service.MailServiceTest)" time="0.129"/>
  <testcase classname="com.example.redditClone.service.MailServiceTest" name="testActivationException on testActivationException(com.example.redditClone.service.MailServiceTest)" time="0.137"/>
</testsuite> <!-- Surefire test -->
