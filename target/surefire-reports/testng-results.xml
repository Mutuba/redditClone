<?xml version="1.0" encoding="UTF-8"?>
<testng-results total="117" passed="117" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2020-10-05T10:23:07Z" name="Surefire suite" finished-at="2020-10-05T10:24:42Z" duration-ms="94852">
    <groups>
    </groups>
    <test started-at="2020-10-05T10:23:07Z" name="Surefire test" finished-at="2020-10-05T10:24:42Z" duration-ms="94852">
      <class name="com.example.redditClone.controller.AuthControllerLoginTest">
        <test-method signature="userShouldLoginSuccessfullyWhenAccountExists() throws java.lang.Exception" started-at="2020-10-05T10:23:41Z" name="userShouldLoginSuccessfullyWhenAccountExists" finished-at="2020-10-05T10:23:47Z" duration-ms="6346" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- userShouldLoginSuccessfullyWhenAccountExists -->
        <test-method signature="userLoginShouldBeUnsuccessfulWhenWrongAccountDetailsAreUsed() throws java.lang.Exception" started-at="2020-10-05T10:23:41Z" name="userLoginShouldBeUnsuccessfulWhenWrongAccountDetailsAreUsed" finished-at="2020-10-05T10:23:47Z" duration-ms="6396" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- userLoginShouldBeUnsuccessfulWhenWrongAccountDetailsAreUsed -->
        <test-method signature="userLoginShouldBeUnsuccessfulWhenWrongPasswordIsUsed() throws java.lang.Exception" started-at="2020-10-05T10:23:41Z" name="userLoginShouldBeUnsuccessfulWhenWrongPasswordIsUsed" finished-at="2020-10-05T10:23:47Z" duration-ms="6625" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- userLoginShouldBeUnsuccessfulWhenWrongPasswordIsUsed -->
      </class> <!-- com.example.redditClone.controller.AuthControllerLoginTest -->
      <class name="com.example.redditClone.models.NotificationEmailTest">
        <test-method signature="testEqualsMethodContracts()" started-at="2020-10-05T10:23:34Z" name="testEqualsMethodContracts" finished-at="2020-10-05T10:23:34Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEqualsMethodContracts -->
        <test-method signature="testCreateCommentWithAllArgsConstructorArgs()" started-at="2020-10-05T10:23:34Z" name="testCreateCommentWithAllArgsConstructorArgs" finished-at="2020-10-05T10:23:34Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateCommentWithAllArgsConstructorArgs -->
        <test-method signature="testCreateVoteWithBuilderPatternToString()" started-at="2020-10-05T10:23:34Z" name="testCreateVoteWithBuilderPatternToString" finished-at="2020-10-05T10:23:34Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateVoteWithBuilderPatternToString -->
        <test-method signature="testCreateNotificationEmailUsingSetterMethod()" started-at="2020-10-05T10:23:34Z" name="testCreateNotificationEmailUsingSetterMethod" finished-at="2020-10-05T10:23:34Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateNotificationEmailUsingSetterMethod -->
      </class> <!-- com.example.redditClone.models.NotificationEmailTest -->
      <class name="com.example.redditClone.service.AuthServiceTest">
        <test-method signature="shouldRegisterUserSuccessfully() throws java.lang.Exception" started-at="2020-10-05T10:24:38Z" name="shouldRegisterUserSuccessfully" finished-at="2020-10-05T10:24:41Z" duration-ms="3019" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRegisterUserSuccessfully -->
        <test-method signature="shouldVerifyAccountVerificationTokenSuccessfullyForValidTokens()" started-at="2020-10-05T10:24:38Z" name="shouldVerifyAccountVerificationTokenSuccessfullyForValidTokens" finished-at="2020-10-05T10:24:42Z" duration-ms="3550" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldVerifyAccountVerificationTokenSuccessfullyForValidTokens -->
        <test-method signature="shouldThrowRefreshExceptionWhenInvalidRefreshToken()" started-at="2020-10-05T10:24:38Z" name="shouldThrowRefreshExceptionWhenInvalidRefreshToken" finished-at="2020-10-05T10:24:41Z" duration-ms="3029" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowRefreshExceptionWhenInvalidRefreshToken -->
        <test-method signature="shouldValidateRefreshTokenSuccessfully()" started-at="2020-10-05T10:24:38Z" name="shouldValidateRefreshTokenSuccessfully" finished-at="2020-10-05T10:24:41Z" duration-ms="3244" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldValidateRefreshTokenSuccessfully -->
        <test-method signature="shouldThrowActivationExceptionIfTokenIsInvalid()" started-at="2020-10-05T10:24:38Z" name="shouldThrowActivationExceptionIfTokenIsInvalid" finished-at="2020-10-05T10:24:41Z" duration-ms="3252" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowActivationExceptionIfTokenIsInvalid -->
        <test-method signature="shouldThrowUsernameNotFoundExceptionWhenUserDoesNotExist()" started-at="2020-10-05T10:24:38Z" name="shouldThrowUsernameNotFoundExceptionWhenUserDoesNotExist" finished-at="2020-10-05T10:24:41Z" duration-ms="3144" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowUsernameNotFoundExceptionWhenUserDoesNotExist -->
        <test-method signature="shouldReturnFalseWhenAuthenticationIsEmpty()" started-at="2020-10-05T10:24:38Z" name="shouldReturnFalseWhenAuthenticationIsEmpty" finished-at="2020-10-05T10:24:41Z" duration-ms="2834" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnFalseWhenAuthenticationIsEmpty -->
        <test-method signature="shouldDeleteRefreshTokenWhenRefreshTokenExists()" started-at="2020-10-05T10:24:38Z" name="shouldDeleteRefreshTokenWhenRefreshTokenExists" finished-at="2020-10-05T10:24:42Z" duration-ms="3662" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeleteRefreshTokenWhenRefreshTokenExists -->
        <test-method signature="shouldLoginUserSuccessfullyForCorrectUsernameAndPassword()" started-at="2020-10-05T10:24:38Z" name="shouldLoginUserSuccessfullyForCorrectUsernameAndPassword" finished-at="2020-10-05T10:24:42Z" duration-ms="3933" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldLoginUserSuccessfullyForCorrectUsernameAndPassword -->
        <test-method signature="shouldGetCurrentUserPrincipal()" started-at="2020-10-05T10:24:38Z" name="shouldGetCurrentUserPrincipal" finished-at="2020-10-05T10:24:41Z" duration-ms="3429" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldGetCurrentUserPrincipal -->
      </class> <!-- com.example.redditClone.service.AuthServiceTest -->
      <class name="com.example.redditClone.controller.CommentControllerTest">
        <test-method signature="shouldReturnAlistOfCommentsBasedOnPostId() throws java.lang.Exception" started-at="2020-10-05T10:24:08Z" name="shouldReturnAlistOfCommentsBasedOnPostId" finished-at="2020-10-05T10:24:12Z" duration-ms="3387" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnAlistOfCommentsBasedOnPostId -->
        <test-method signature="shouldReturnAlistOfCommentsBasedOnUsername() throws java.lang.Exception" started-at="2020-10-05T10:24:08Z" name="shouldReturnAlistOfCommentsBasedOnUsername" finished-at="2020-10-05T10:24:12Z" duration-ms="3524" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnAlistOfCommentsBasedOnUsername -->
        <test-method signature="shouldReturnCreatedSuccessWhenAddPostMethodIsCalled() throws java.lang.Exception" started-at="2020-10-05T10:24:08Z" name="shouldReturnCreatedSuccessWhenAddPostMethodIsCalled" finished-at="2020-10-05T10:24:12Z" duration-ms="3721" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCreatedSuccessWhenAddPostMethodIsCalled -->
      </class> <!-- com.example.redditClone.controller.CommentControllerTest -->
      <class name="com.example.redditClone.dto.PostResponseTest">
        <test-method signature="testPostResponseBuilderPatternToStringMethod()" started-at="2020-10-05T10:23:07Z" name="testPostResponseBuilderPatternToStringMethod" finished-at="2020-10-05T10:23:07Z" duration-ms="65" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPostResponseBuilderPatternToStringMethod -->
        <test-method signature="testPostRequestsetterMethods()" started-at="2020-10-05T10:23:07Z" name="testPostRequestsetterMethods" finished-at="2020-10-05T10:23:07Z" duration-ms="65" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPostRequestsetterMethods -->
      </class> <!-- com.example.redditClone.dto.PostResponseTest -->
      <class name="com.example.redditClone.controller.VoteControllerVoteExceptionTest">
        <test-method signature="shouldRaiseVoteExceptionForDownVoteWhenUserHadAlreadyDownVoted() throws java.lang.Exception" started-at="2020-10-05T10:24:12Z" name="shouldRaiseVoteExceptionForDownVoteWhenUserHadAlreadyDownVoted" finished-at="2020-10-05T10:24:15Z" duration-ms="3263" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRaiseVoteExceptionForDownVoteWhenUserHadAlreadyDownVoted -->
      </class> <!-- com.example.redditClone.controller.VoteControllerVoteExceptionTest -->
      <class name="com.example.redditClone.service.MailServiceTest">
        <test-method signature="testActivationException()" started-at="2020-10-05T10:24:42Z" name="testActivationException" finished-at="2020-10-05T10:24:42Z" duration-ms="137" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testActivationException -->
        <test-method signature="testSendEmailSuccesful()" started-at="2020-10-05T10:24:42Z" name="testSendEmailSuccesful" finished-at="2020-10-05T10:24:42Z" duration-ms="129" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSendEmailSuccesful -->
      </class> <!-- com.example.redditClone.service.MailServiceTest -->
      <class name="com.example.redditClone.models.AccountVerificationTokenTest">
        <test-method signature="createAccountVerificationTokenWithConstructor()" started-at="2020-10-05T10:23:35Z" name="createAccountVerificationTokenWithConstructor" finished-at="2020-10-05T10:23:35Z" duration-ms="24" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountVerificationTokenWithConstructor -->
        <test-method signature="createAccountVerificationToken()" started-at="2020-10-05T10:23:35Z" name="createAccountVerificationToken" finished-at="2020-10-05T10:23:35Z" duration-ms="39" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountVerificationToken -->
      </class> <!-- com.example.redditClone.models.AccountVerificationTokenTest -->
      <class name="com.example.redditClone.dto.UserSummaryTest">
        <test-method signature="testUserSummarySetterMethods()" started-at="2020-10-05T10:23:07Z" name="testUserSummarySetterMethods" finished-at="2020-10-05T10:23:07Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserSummarySetterMethods -->
      </class> <!-- com.example.redditClone.dto.UserSummaryTest -->
      <class name="com.example.redditClone.dto.AuthenticationResponseTest">
        <test-method signature="testBuilderPatternToStringMethod()" started-at="2020-10-05T10:23:07Z" name="testBuilderPatternToStringMethod" finished-at="2020-10-05T10:23:07Z" duration-ms="26" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBuilderPatternToStringMethod -->
        <test-method signature="testSetterMethods()" started-at="2020-10-05T10:23:07Z" name="testSetterMethods" finished-at="2020-10-05T10:23:07Z" duration-ms="26" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSetterMethods -->
      </class> <!-- com.example.redditClone.dto.AuthenticationResponseTest -->
      <class name="com.example.redditClone.controller.UserControllerTest">
        <test-method signature="shouldReturnCurrentUserDetails() throws java.lang.Exception" started-at="2020-10-05T10:23:35Z" name="shouldReturnCurrentUserDetails" finished-at="2020-10-05T10:23:41Z" duration-ms="5734" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCurrentUserDetails -->
      </class> <!-- com.example.redditClone.controller.UserControllerTest -->
      <class name="com.example.redditClone.controller.PostControllerExceptionsTest">
        <test-method signature="shouldRaiseSubredditNotFoundWhenSaveIsCalledWithSubredditNameThatDoesNotExist() throws java.lang.Exception" started-at="2020-10-05T10:24:15Z" name="shouldRaiseSubredditNotFoundWhenSaveIsCalledWithSubredditNameThatDoesNotExist" finished-at="2020-10-05T10:24:18Z" duration-ms="2748" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRaiseSubredditNotFoundWhenSaveIsCalledWithSubredditNameThatDoesNotExist -->
        <test-method signature="shouldRaisePostNotFoundWhenGetPostByIDIsCalledWithNonExistingID() throws java.lang.Exception" started-at="2020-10-05T10:24:15Z" name="shouldRaisePostNotFoundWhenGetPostByIDIsCalledWithNonExistingID" finished-at="2020-10-05T10:24:18Z" duration-ms="2543" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRaisePostNotFoundWhenGetPostByIDIsCalledWithNonExistingID -->
        <test-method signature="shouldRaiseSubredditNotFoundWhenGetPostByIDIsCalledWithNonExistingSubredditID() throws java.lang.Exception" started-at="2020-10-05T10:24:15Z" name="shouldRaiseSubredditNotFoundWhenGetPostByIDIsCalledWithNonExistingSubredditID" finished-at="2020-10-05T10:24:18Z" duration-ms="2647" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRaiseSubredditNotFoundWhenGetPostByIDIsCalledWithNonExistingSubredditID -->
        <test-method signature="shouldRaiseUserNotFoundWhenGetPostByUsernameIsCalledWithNonExistingUsername() throws java.lang.Exception" started-at="2020-10-05T10:24:15Z" name="shouldRaiseUserNotFoundWhenGetPostByUsernameIsCalledWithNonExistingUsername" finished-at="2020-10-05T10:24:18Z" duration-ms="2846" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRaiseUserNotFoundWhenGetPostByUsernameIsCalledWithNonExistingUsername -->
      </class> <!-- com.example.redditClone.controller.PostControllerExceptionsTest -->
      <class name="com.example.redditClone.models.CommentTest">
        <test-method signature="testHashCodeMethodContracts()" started-at="2020-10-05T10:23:34Z" name="testHashCodeMethodContracts" finished-at="2020-10-05T10:23:35Z" duration-ms="116" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHashCodeMethodContracts -->
        <test-method signature="testCreateCommentWithBuilderPattern()" started-at="2020-10-05T10:23:34Z" name="testCreateCommentWithBuilderPattern" finished-at="2020-10-05T10:23:34Z" duration-ms="20" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateCommentWithBuilderPattern -->
        <test-method signature="testCreateVoteWithBuilderPatternToString()" started-at="2020-10-05T10:23:34Z" name="testCreateVoteWithBuilderPatternToString" finished-at="2020-10-05T10:23:34Z" duration-ms="38" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateVoteWithBuilderPatternToString -->
        <test-method signature="testEqualsMethodContracts()" started-at="2020-10-05T10:23:34Z" name="testEqualsMethodContracts" finished-at="2020-10-05T10:23:35Z" duration-ms="78" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEqualsMethodContracts -->
        <test-method signature="testCreateCommentWithSetterMethods()" started-at="2020-10-05T10:23:34Z" name="testCreateCommentWithSetterMethods" finished-at="2020-10-05T10:23:35Z" duration-ms="130" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateCommentWithSetterMethods -->
        <test-method signature="testCreateCommentWithAllArgsConstructorArgs()" started-at="2020-10-05T10:23:34Z" name="testCreateCommentWithAllArgsConstructorArgs" finished-at="2020-10-05T10:23:35Z" duration-ms="96" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateCommentWithAllArgsConstructorArgs -->
      </class> <!-- com.example.redditClone.models.CommentTest -->
      <class name="com.example.redditClone.dto.PostRequestTest">
        <test-method signature="testPostRequestBuilderPatternToStringMethod()" started-at="2020-10-05T10:23:07Z" name="testPostRequestBuilderPatternToStringMethod" finished-at="2020-10-05T10:23:07Z" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPostRequestBuilderPatternToStringMethod -->
        <test-method signature="testPostRequestsetterMethods()" started-at="2020-10-05T10:23:07Z" name="testPostRequestsetterMethods" finished-at="2020-10-05T10:23:08Z" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPostRequestsetterMethods -->
      </class> <!-- com.example.redditClone.dto.PostRequestTest -->
      <class name="com.example.redditClone.controller.PostControllerTest">
        <test-method signature="shouldReturnAListOfPostsWhenGetAllPostsIsCalled() throws java.lang.Exception" started-at="2020-10-05T10:23:47Z" name="shouldReturnAListOfPostsWhenGetAllPostsIsCalled" finished-at="2020-10-05T10:23:53Z" duration-ms="5604" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnAListOfPostsWhenGetAllPostsIsCalled -->
        <test-method signature="shouldReturnCreatedSuccessWhenAddPostMethodIsCalled() throws java.lang.Exception" started-at="2020-10-05T10:23:47Z" name="shouldReturnCreatedSuccessWhenAddPostMethodIsCalled" finished-at="2020-10-05T10:23:53Z" duration-ms="6096" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCreatedSuccessWhenAddPostMethodIsCalled -->
        <test-method signature="shouldReturnPostsWithinGivenSubredditIDWhenGetPostsBySubredditIsCalled() throws java.lang.Exception" started-at="2020-10-05T10:23:47Z" name="shouldReturnPostsWithinGivenSubredditIDWhenGetPostsBySubredditIsCalled" finished-at="2020-10-05T10:23:53Z" duration-ms="5821" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnPostsWithinGivenSubredditIDWhenGetPostsBySubredditIsCalled -->
        <test-method signature="shouldReturnPostsWithinGivenSubredditIDWhenGetPostsByUsernameIsCalled() throws java.lang.Exception" started-at="2020-10-05T10:23:47Z" name="shouldReturnPostsWithinGivenSubredditIDWhenGetPostsByUsernameIsCalled" finished-at="2020-10-05T10:23:53Z" duration-ms="5721" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnPostsWithinGivenSubredditIDWhenGetPostsByUsernameIsCalled -->
        <test-method signature="shouldReturnAPostWithGivenIdWhenGetPostByIDIsCalled() throws java.lang.Exception" started-at="2020-10-05T10:23:47Z" name="shouldReturnAPostWithGivenIdWhenGetPostByIDIsCalled" finished-at="2020-10-05T10:23:54Z" duration-ms="6275" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnAPostWithGivenIdWhenGetPostByIDIsCalled -->
      </class> <!-- com.example.redditClone.controller.PostControllerTest -->
      <class name="com.example.redditClone.controller.AuthControllerConstraintsCheckTest">
        <test-method signature="userSignUpShouldFailIfEmailIsTaken() throws java.lang.Exception" started-at="2020-10-05T10:23:58Z" name="userSignUpShouldFailIfEmailIsTaken" finished-at="2020-10-05T10:24:02Z" duration-ms="3661" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- userSignUpShouldFailIfEmailIsTaken -->
        <test-method signature="userSignUpShouldFailIfUsernameIsTaken() throws java.lang.Exception" started-at="2020-10-05T10:23:58Z" name="userSignUpShouldFailIfUsernameIsTaken" finished-at="2020-10-05T10:24:02Z" duration-ms="3650" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- userSignUpShouldFailIfUsernameIsTaken -->
      </class> <!-- com.example.redditClone.controller.AuthControllerConstraintsCheckTest -->
      <class name="com.example.redditClone.models.VoteTest">
        <test-method signature="testCreatePostWithBuilderPattern()" started-at="2020-10-05T10:23:34Z" name="testCreatePostWithBuilderPattern" finished-at="2020-10-05T10:23:34Z" duration-ms="143" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreatePostWithBuilderPattern -->
        <test-method signature="testCreateVoteWithBuilderPatternToString()" started-at="2020-10-05T10:23:34Z" name="testCreateVoteWithBuilderPatternToString" finished-at="2020-10-05T10:23:34Z" duration-ms="226" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateVoteWithBuilderPatternToString -->
        <test-method signature="testCreateVoteWithSetterMethods()" started-at="2020-10-05T10:23:34Z" name="testCreateVoteWithSetterMethods" finished-at="2020-10-05T10:23:34Z" duration-ms="347" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateVoteWithSetterMethods -->
        <test-method signature="testCreatePostWithAllArgsConstructorArgs()" started-at="2020-10-05T10:23:34Z" name="testCreatePostWithAllArgsConstructorArgs" finished-at="2020-10-05T10:23:34Z" duration-ms="311" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreatePostWithAllArgsConstructorArgs -->
      </class> <!-- com.example.redditClone.models.VoteTest -->
      <class name="com.example.redditClone.dto.CommentRequestTest">
        <test-method signature="testCommentRequestBuilderToStringMethod()" started-at="2020-10-05T10:23:07Z" name="testCommentRequestBuilderToStringMethod" finished-at="2020-10-05T10:23:07Z" duration-ms="20" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCommentRequestBuilderToStringMethod -->
        <test-method signature="testCommentResponseSetterMethods()" started-at="2020-10-05T10:23:07Z" name="testCommentResponseSetterMethods" finished-at="2020-10-05T10:23:07Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCommentResponseSetterMethods -->
      </class> <!-- com.example.redditClone.dto.CommentRequestTest -->
      <class name="com.example.redditClone.dto.LoginRequestTest">
        <test-method signature="testSetterMethds()" started-at="2020-10-05T10:23:07Z" name="testSetterMethds" finished-at="2020-10-05T10:23:07Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSetterMethds -->
      </class> <!-- com.example.redditClone.dto.LoginRequestTest -->
      <class name="com.example.redditClone.models.PostTest">
        <test-method signature="testCreatePostWithBuilderPatternToString()" started-at="2020-10-05T10:23:35Z" name="testCreatePostWithBuilderPatternToString" finished-at="2020-10-05T10:23:35Z" duration-ms="103" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreatePostWithBuilderPatternToString -->
        <test-method signature="testCreatePostWithSetterMethods()" started-at="2020-10-05T10:23:35Z" name="testCreatePostWithSetterMethods" finished-at="2020-10-05T10:23:35Z" duration-ms="17" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreatePostWithSetterMethods -->
        <test-method signature="testCreatePostWithAllArgsConstructorArgs()" started-at="2020-10-05T10:23:35Z" name="testCreatePostWithAllArgsConstructorArgs" finished-at="2020-10-05T10:23:35Z" duration-ms="68" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreatePostWithAllArgsConstructorArgs -->
        <test-method signature="testCreatePostWithBuilderPattern()" started-at="2020-10-05T10:23:35Z" name="testCreatePostWithBuilderPattern" finished-at="2020-10-05T10:23:35Z" duration-ms="39" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreatePostWithBuilderPattern -->
      </class> <!-- com.example.redditClone.models.PostTest -->
      <class name="com.example.redditClone.dto.VoteDTOTest">
        <test-method signature="testVoteDTOAttributes()" started-at="2020-10-05T10:23:07Z" name="testVoteDTOAttributes" finished-at="2020-10-05T10:23:07Z" duration-ms="39" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVoteDTOAttributes -->
      </class> <!-- com.example.redditClone.dto.VoteDTOTest -->
      <class name="com.example.redditClone.dto.CommentResponseTest">
        <test-method signature="testCommentResponseSetterMethods()" started-at="2020-10-05T10:23:08Z" name="testCommentResponseSetterMethods" finished-at="2020-10-05T10:23:08Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCommentResponseSetterMethods -->
        <test-method signature="testCommentResponseBuilderToStringMethod()" started-at="2020-10-05T10:23:08Z" name="testCommentResponseBuilderToStringMethod" finished-at="2020-10-05T10:23:08Z" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCommentResponseBuilderToStringMethod -->
      </class> <!-- com.example.redditClone.dto.CommentResponseTest -->
      <class name="com.example.redditClone.security.JwtTokenProviderTest">
        <test-method signature="shouldThrowMalformedExceptionWhenInvalidSignature()" started-at="2020-10-05T10:23:10Z" name="shouldThrowMalformedExceptionWhenInvalidSignature" finished-at="2020-10-05T10:23:32Z" duration-ms="21617" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowMalformedExceptionWhenInvalidSignature -->
        <test-method signature="shouldThrowIllegalArgumentExceptionWhenInvalidSignature() throws java.lang.Exception" started-at="2020-10-05T10:23:10Z" name="shouldThrowIllegalArgumentExceptionWhenInvalidSignature" finished-at="2020-10-05T10:23:32Z" duration-ms="21602" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowIllegalArgumentExceptionWhenInvalidSignature -->
        <test-method signature="shouldReturnTrueWhenTokenIsValid()" started-at="2020-10-05T10:23:10Z" name="shouldReturnTrueWhenTokenIsValid" finished-at="2020-10-05T10:23:32Z" duration-ms="21695" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnTrueWhenTokenIsValid -->
        <test-method signature="shouldGetUserIdFromTokenWhenValidJwtToken()" started-at="2020-10-05T10:23:10Z" name="shouldGetUserIdFromTokenWhenValidJwtToken" finished-at="2020-10-05T10:23:32Z" duration-ms="21685" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldGetUserIdFromTokenWhenValidJwtToken -->
        <test-method signature="shouldThrowInvalidSignatureExceptionWhenInvalidSignature()" started-at="2020-10-05T10:23:10Z" name="shouldThrowInvalidSignatureExceptionWhenInvalidSignature" finished-at="2020-10-05T10:23:32Z" duration-ms="21665" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowInvalidSignatureExceptionWhenInvalidSignature -->
        <test-method signature="shouldThrowExpiredJwtExceptionWhenTokenHasExpired()" started-at="2020-10-05T10:23:10Z" name="shouldThrowExpiredJwtExceptionWhenTokenHasExpired" finished-at="2020-10-05T10:23:32Z" duration-ms="21673" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowExpiredJwtExceptionWhenTokenHasExpired -->
      </class> <!-- com.example.redditClone.security.JwtTokenProviderTest -->
      <class name="com.example.redditClone.dto.SubredditDTOTest">
        <test-method signature="testSubredditDTOBuilderPatternToStringMethod()" started-at="2020-10-05T10:23:07Z" name="testSubredditDTOBuilderPatternToStringMethod" finished-at="2020-10-05T10:23:07Z" duration-ms="20" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubredditDTOBuilderPatternToStringMethod -->
        <test-method signature="testSubredditDTOSetterMethods()" started-at="2020-10-05T10:23:07Z" name="testSubredditDTOSetterMethods" finished-at="2020-10-05T10:23:07Z" duration-ms="21" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubredditDTOSetterMethods -->
      </class> <!-- com.example.redditClone.dto.SubredditDTOTest -->
      <class name="com.example.redditClone.models.SubredditTest">
        <test-method signature="testCreatePostWithAllArgsConstructorArgs()" started-at="2020-10-05T10:23:32Z" name="testCreatePostWithAllArgsConstructorArgs" finished-at="2020-10-05T10:23:34Z" duration-ms="2071" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreatePostWithAllArgsConstructorArgs -->
        <test-method signature="testCreatePostWithBuilderPatternToString()" started-at="2020-10-05T10:23:32Z" name="testCreatePostWithBuilderPatternToString" finished-at="2020-10-05T10:23:34Z" duration-ms="2104" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreatePostWithBuilderPatternToString -->
        <test-method signature="testCreatePostWithSetterMethods()" started-at="2020-10-05T10:23:32Z" name="testCreatePostWithSetterMethods" finished-at="2020-10-05T10:23:34Z" duration-ms="1930" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreatePostWithSetterMethods -->
        <test-method signature="testCreatePostWithBuilderPattern()" started-at="2020-10-05T10:23:32Z" name="testCreatePostWithBuilderPattern" finished-at="2020-10-05T10:23:34Z" duration-ms="2040" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreatePostWithBuilderPattern -->
      </class> <!-- com.example.redditClone.models.SubredditTest -->
      <class name="com.example.redditClone.service.UserPrincipalTest">
        <test-method signature="testEqualsMethodContracts()" started-at="2020-10-05T10:24:30Z" name="testEqualsMethodContracts" finished-at="2020-10-05T10:24:30Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEqualsMethodContracts -->
        <test-method signature="testHashCodeMethodContact()" started-at="2020-10-05T10:24:30Z" name="testHashCodeMethodContact" finished-at="2020-10-05T10:24:30Z" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHashCodeMethodContact -->
        <test-method signature="testCreateUserPrincipal()" started-at="2020-10-05T10:24:30Z" name="testCreateUserPrincipal" finished-at="2020-10-05T10:24:30Z" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateUserPrincipal -->
      </class> <!-- com.example.redditClone.service.UserPrincipalTest -->
      <class name="com.example.redditClone.models.UserEntityTest">
        <test-method signature="whenBlankUserName_and_Email_thenOneConstraintViolation()" started-at="2020-10-05T10:23:34Z" name="whenBlankUserName_and_Email_thenOneConstraintViolation" finished-at="2020-10-05T10:23:34Z" duration-ms="35" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- whenBlankUserName_and_Email_thenOneConstraintViolation -->
        <test-method signature="saveUserWithCustomUserID()" started-at="2020-10-05T10:23:34Z" name="saveUserWithCustomUserID" finished-at="2020-10-05T10:23:34Z" duration-ms="53" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveUserWithCustomUserID -->
        <test-method signature="saveUser()" started-at="2020-10-05T10:23:34Z" name="saveUser" finished-at="2020-10-05T10:23:34Z" duration-ms="14" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveUser -->
        <test-method signature="when_ID_AccountStatus_and_CreationDate_Are_Set()" started-at="2020-10-05T10:23:34Z" name="when_ID_AccountStatus_and_CreationDate_Are_Set" finished-at="2020-10-05T10:23:34Z" duration-ms="83" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- when_ID_AccountStatus_and_CreationDate_Are_Set -->
      </class> <!-- com.example.redditClone.models.UserEntityTest -->
      <class name="com.example.redditClone.models.RefreshTokenTest">
        <test-method signature="testCreateVoteWithBuilderPatternToString()" started-at="2020-10-05T10:23:35Z" name="testCreateVoteWithBuilderPatternToString" finished-at="2020-10-05T10:23:35Z" duration-ms="15" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateVoteWithBuilderPatternToString -->
        <test-method signature="testCreateCommentWithAllArgsConstructorArgs()" started-at="2020-10-05T10:23:35Z" name="testCreateCommentWithAllArgsConstructorArgs" finished-at="2020-10-05T10:23:35Z" duration-ms="40" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateCommentWithAllArgsConstructorArgs -->
        <test-method signature="testEqualsMethodContracts()" started-at="2020-10-05T10:23:35Z" name="testEqualsMethodContracts" finished-at="2020-10-05T10:23:35Z" duration-ms="30" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEqualsMethodContracts -->
        <test-method signature="testHashCodeMethodContracts()" started-at="2020-10-05T10:23:35Z" name="testHashCodeMethodContracts" finished-at="2020-10-05T10:23:35Z" duration-ms="50" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHashCodeMethodContracts -->
      </class> <!-- com.example.redditClone.models.RefreshTokenTest -->
      <class name="com.example.redditClone.controller.VoteControllerPostExceptionTest">
        <test-method signature="shouldRaisePostNotFoundExceptionWhenVotingForAPostThatDoesNotExist() throws java.lang.Exception" started-at="2020-10-05T10:24:02Z" name="shouldRaisePostNotFoundExceptionWhenVotingForAPostThatDoesNotExist" finished-at="2020-10-05T10:24:05Z" duration-ms="3209" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRaisePostNotFoundExceptionWhenVotingForAPostThatDoesNotExist -->
      </class> <!-- com.example.redditClone.controller.VoteControllerPostExceptionTest -->
      <class name="com.example.redditClone.controller.AuthControllerRefreshTokenTest">
        <test-method signature="userShouldRefreshTokenWhenRefreshTokenIsRequestedWithValidTokenAndUsername() throws java.lang.Exception" started-at="2020-10-05T10:24:21Z" name="userShouldRefreshTokenWhenRefreshTokenIsRequestedWithValidTokenAndUsername" finished-at="2020-10-05T10:24:25Z" duration-ms="4095" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- userShouldRefreshTokenWhenRefreshTokenIsRequestedWithValidTokenAndUsername -->
        <test-method signature="shouldReturnTokenDeletedMessageWhenUserLogsOutOfTheSystem() throws java.lang.Exception" started-at="2020-10-05T10:24:21Z" name="shouldReturnTokenDeletedMessageWhenUserLogsOutOfTheSystem" finished-at="2020-10-05T10:24:25Z" duration-ms="4107" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnTokenDeletedMessageWhenUserLogsOutOfTheSystem -->
      </class> <!-- com.example.redditClone.controller.AuthControllerRefreshTokenTest -->
      <class name="com.example.redditClone.controller.AuthControllerRegistrationTest">
        <test-method signature="shouldRaiseMethodArgumentNotValidExceptionWithBadRequestWhenParamsValidationFails() throws java.lang.Exception" started-at="2020-10-05T10:23:54Z" name="shouldRaiseMethodArgumentNotValidExceptionWithBadRequestWhenParamsValidationFails" finished-at="2020-10-05T10:23:58Z" duration-ms="4091" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRaiseMethodArgumentNotValidExceptionWithBadRequestWhenParamsValidationFails -->
        <test-method signature="shouldReturnCreatedIfRegistrationRequestIsOk() throws java.lang.Exception" started-at="2020-10-05T10:23:54Z" name="shouldReturnCreatedIfRegistrationRequestIsOk" finished-at="2020-10-05T10:23:58Z" duration-ms="4819" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCreatedIfRegistrationRequestIsOk -->
      </class> <!-- com.example.redditClone.controller.AuthControllerRegistrationTest -->
      <class name="com.example.redditClone.service.PostServiceTest">
        <test-method signature="shouldMapSubredditObjectToSubredditDTOWhenGetSubredditIsCalled()" started-at="2020-10-05T10:24:26Z" name="shouldMapSubredditObjectToSubredditDTOWhenGetSubredditIsCalled" finished-at="2020-10-05T10:24:30Z" duration-ms="4088" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapSubredditObjectToSubredditDTOWhenGetSubredditIsCalled -->
      </class> <!-- com.example.redditClone.service.PostServiceTest -->
      <class name="com.example.redditClone.dto.RefreshTokenRequestTest">
        <test-method signature="testSetterMethods()" started-at="2020-10-05T10:23:07Z" name="testSetterMethods" finished-at="2020-10-05T10:23:07Z" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSetterMethods -->
        <test-method signature="testBuilderPattern()" started-at="2020-10-05T10:23:07Z" name="testBuilderPattern" finished-at="2020-10-05T10:23:07Z" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBuilderPattern -->
      </class> <!-- com.example.redditClone.dto.RefreshTokenRequestTest -->
      <class name="com.example.redditClone.controller.CommentControllerExceptionsTest">
        <test-method signature="shouldThrowPostNotFoundExceptionWhenPostIdDoesNotExist() throws java.lang.Exception" started-at="2020-10-05T10:24:21Z" name="shouldThrowPostNotFoundExceptionWhenPostIdDoesNotExist" finished-at="2020-10-05T10:24:21Z" duration-ms="200" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowPostNotFoundExceptionWhenPostIdDoesNotExist -->
        <test-method signature="shouldThrowPostNotFoundWhenGettingListOfCommentsBasedOnPostIdWhenPostIDDoesNotExist() throws java.lang.Exception" started-at="2020-10-05T10:24:21Z" name="shouldThrowPostNotFoundWhenGettingListOfCommentsBasedOnPostIdWhenPostIDDoesNotExist" finished-at="2020-10-05T10:24:21Z" duration-ms="101" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowPostNotFoundWhenGettingListOfCommentsBasedOnPostIdWhenPostIDDoesNotExist -->
        <test-method signature="shouldThrowUserNotFoundExceptionWhenGettingListOfCommentsBasedOnUsernameIfUsernameDoesNotExist() throws java.lang.Exception" started-at="2020-10-05T10:24:21Z" name="shouldThrowUserNotFoundExceptionWhenGettingListOfCommentsBasedOnUsernameIfUsernameDoesNotExist" finished-at="2020-10-05T10:24:21Z" duration-ms="306" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowUserNotFoundExceptionWhenGettingListOfCommentsBasedOnUsernameIfUsernameDoesNotExist -->
      </class> <!-- com.example.redditClone.controller.CommentControllerExceptionsTest -->
      <class name="com.example.redditClone.controller.SubredditControllerTest">
        <test-method signature="getSubreddit_ShouldReturn_Found_Subreddit() throws java.lang.Exception" started-at="2020-10-05T10:24:05Z" name="getSubreddit_ShouldReturn_Found_Subreddit" finished-at="2020-10-05T10:24:08Z" duration-ms="2752" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getSubreddit_ShouldReturn_Found_Subreddit -->
        <test-method signature="getAllSubreddits_ShouldReturn_List_of_Subreddits() throws java.lang.Exception" started-at="2020-10-05T10:24:05Z" name="getAllSubreddits_ShouldReturn_List_of_Subreddits" finished-at="2020-10-05T10:24:08Z" duration-ms="2772" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSubreddits_ShouldReturn_List_of_Subreddits -->
        <test-method signature="addSubreddit_ShouldReturn_Created_Subreddit() throws java.lang.Exception" started-at="2020-10-05T10:24:05Z" name="addSubreddit_ShouldReturn_Created_Subreddit" finished-at="2020-10-05T10:24:08Z" duration-ms="2961" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addSubreddit_ShouldReturn_Created_Subreddit -->
        <test-method signature="getSubreddit_ShouldReturn_404_Not_Found_For_Non_Existent_Subreddit() throws java.lang.Exception" started-at="2020-10-05T10:24:05Z" name="getSubreddit_ShouldReturn_404_Not_Found_For_Non_Existent_Subreddit" finished-at="2020-10-05T10:24:08Z" duration-ms="2973" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getSubreddit_ShouldReturn_404_Not_Found_For_Non_Existent_Subreddit -->
      </class> <!-- com.example.redditClone.controller.SubredditControllerTest -->
      <class name="com.example.redditClone.controller.AuthControllerTokenVerificationTest">
        <test-method signature="shouldRaiseActivationExceptionWhenActivationTokenIsInvalid() throws java.lang.Exception" started-at="2020-10-05T10:24:18Z" name="shouldRaiseActivationExceptionWhenActivationTokenIsInvalid" finished-at="2020-10-05T10:24:21Z" duration-ms="2440" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRaiseActivationExceptionWhenActivationTokenIsInvalid -->
        <test-method signature="shouldReturnOkWhenActivationTokenIsValid() throws java.lang.Exception" started-at="2020-10-05T10:24:18Z" name="shouldReturnOkWhenActivationTokenIsValid" finished-at="2020-10-05T10:24:21Z" duration-ms="2487" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnOkWhenActivationTokenIsValid -->
      </class> <!-- com.example.redditClone.controller.AuthControllerTokenVerificationTest -->
      <class name="com.example.redditClone.dto.ApiResponseTest">
        <test-method signature="testSettterMethods()" started-at="2020-10-05T10:23:07Z" name="testSettterMethods" finished-at="2020-10-05T10:23:07Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSettterMethods -->
      </class> <!-- com.example.redditClone.dto.ApiResponseTest -->
      <class name="com.example.redditClone.service.SubredditServiceTest">
        <test-method signature="shouldReturnSubredditWhenSaveIsCalledWithSubredditDTO()" started-at="2020-10-05T10:24:30Z" name="shouldReturnSubredditWhenSaveIsCalledWithSubredditDTO" finished-at="2020-10-05T10:24:38Z" duration-ms="8028" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnSubredditWhenSaveIsCalledWithSubredditDTO -->
        <test-method signature="shouldReturnListOfSubredditDTOsWhenGetAllisCalled()" started-at="2020-10-05T10:24:30Z" name="shouldReturnListOfSubredditDTOsWhenGetAllisCalled" finished-at="2020-10-05T10:24:38Z" duration-ms="7752" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnListOfSubredditDTOsWhenGetAllisCalled -->
        <test-method signature="shouldThrowSubredditNotFoundExceptionWhenGetSubredditIsCalledWithNonExistingSubredditID()" started-at="2020-10-05T10:24:30Z" name="shouldThrowSubredditNotFoundExceptionWhenGetSubredditIsCalledWithNonExistingSubredditID" finished-at="2020-10-05T10:24:38Z" duration-ms="8040" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowSubredditNotFoundExceptionWhenGetSubredditIsCalledWithNonExistingSubredditID -->
        <test-method signature="shouldMapSubredditObjectToSubredditDTOWhenGetSubredditIsCalled()" started-at="2020-10-05T10:24:30Z" name="shouldMapSubredditObjectToSubredditDTOWhenGetSubredditIsCalled" finished-at="2020-10-05T10:24:38Z" duration-ms="7761" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapSubredditObjectToSubredditDTOWhenGetSubredditIsCalled -->
      </class> <!-- com.example.redditClone.service.SubredditServiceTest -->
      <class name="com.example.redditClone.dto.RegistrationRequestTest">
        <test-method signature="testSetterMethds()" started-at="2020-10-05T10:23:07Z" name="testSetterMethds" finished-at="2020-10-05T10:23:07Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSetterMethds -->
      </class> <!-- com.example.redditClone.dto.RegistrationRequestTest -->
      <class name="com.example.redditClone.controller.VoteControllerTest">
        <test-method signature="shouldReturnOkForDownVoteWhenUserHadUpVoted() throws java.lang.Exception" started-at="2020-10-05T10:24:25Z" name="shouldReturnOkForDownVoteWhenUserHadUpVoted" finished-at="2020-10-05T10:24:25Z" duration-ms="343" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnOkForDownVoteWhenUserHadUpVoted -->
        <test-method signature="shouldReturnOkForDownVote() throws java.lang.Exception" started-at="2020-10-05T10:24:25Z" name="shouldReturnOkForDownVote" finished-at="2020-10-05T10:24:26Z" duration-ms="559" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnOkForDownVote -->
        <test-method signature="shouldReturnOkForUpVote() throws java.lang.Exception" started-at="2020-10-05T10:24:25Z" name="shouldReturnOkForUpVote" finished-at="2020-10-05T10:24:26Z" duration-ms="458" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnOkForUpVote -->
      </class> <!-- com.example.redditClone.controller.VoteControllerTest -->
      <class name="com.example.redditClone.service.CustomUserDetailsServiceTest">
        <test-method signature="shouldRaiseUsernameNotFoundExceptionWhenLoadUserByUsernameIsCalledWithNonExistentUser()" started-at="2020-10-05T10:24:30Z" name="shouldRaiseUsernameNotFoundExceptionWhenLoadUserByUsernameIsCalledWithNonExistentUser" finished-at="2020-10-05T10:24:30Z" duration-ms="41" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRaiseUsernameNotFoundExceptionWhenLoadUserByUsernameIsCalledWithNonExistentUser -->
        <test-method signature="shouldReturnUserDetailsWhenLoadUserByIdIsCalledWithExistingUser()" started-at="2020-10-05T10:24:30Z" name="shouldReturnUserDetailsWhenLoadUserByIdIsCalledWithExistingUser" finished-at="2020-10-05T10:24:30Z" duration-ms="90" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnUserDetailsWhenLoadUserByIdIsCalledWithExistingUser -->
        <test-method signature="shouldRaiseUsernameNotFoundExceptionWhenLoadUserByIdIsCalledWithNonExistentUser()" started-at="2020-10-05T10:24:30Z" name="shouldRaiseUsernameNotFoundExceptionWhenLoadUserByIdIsCalledWithNonExistentUser" finished-at="2020-10-05T10:24:30Z" duration-ms="25" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRaiseUsernameNotFoundExceptionWhenLoadUserByIdIsCalledWithNonExistentUser -->
        <test-method signature="shouldReturnUserDetailsWhenLoadUserByUsernameIsCalledWithExistingUser()" started-at="2020-10-05T10:24:30Z" name="shouldReturnUserDetailsWhenLoadUserByUsernameIsCalledWithExistingUser" finished-at="2020-10-05T10:24:30Z" duration-ms="103" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnUserDetailsWhenLoadUserByUsernameIsCalledWithExistingUser -->
      </class> <!-- com.example.redditClone.service.CustomUserDetailsServiceTest -->
    </test> <!-- Surefire test -->
  </suite> <!-- Surefire suite -->
</testng-results>
